
DEMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000802  00000896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000802  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  0080013e  0080013e  000008d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000904  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001308  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba9  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c9  00000000  00000000  000028bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00003188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069e  00000000  00000000  00003478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008d4  00000000  00000000  00003b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000043ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_13>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_18>
  4c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_19>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	39 03       	fmul	r19, r17
  6a:	3b 03       	fmul	r19, r19
  6c:	42 03       	mulsu	r20, r18
  6e:	42 03       	mulsu	r20, r18
  70:	4b 03       	fmul	r20, r19
  72:	49 03       	fmul	r20, r17
  74:	4b 03       	fmul	r20, r19

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e2 e0       	ldi	r30, 0x02	; 2
  8a:	f8 e0       	ldi	r31, 0x08	; 8
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ae 33       	cpi	r26, 0x3E	; 62
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	ae e3       	ldi	r26, 0x3E	; 62
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 38       	cpi	r26, 0x87	; 135
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 b2 03 	call	0x764	; 0x764 <main>
  ac:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <fsm_random>:
extern uint8_t rand8_asm(uint8_t current);

/* Functions ---------------------------------------------------------*/
/* Call assembly functions to generate psudo-random values. */
void fsm_random(void)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <fsm_random+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <fsm_random+0x8>
  bc:	1f 92       	push	r1
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
    static uint16_t values = 0;
    static uint8_t last = 0;
    static uint8_t new = 0;
    char uart_string[5];

    switch (current_state) {
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	91 05       	cpc	r25, r1
  ce:	c1 f1       	breq	.+112    	; 0x140 <fsm_random+0x8c>
  d0:	18 f4       	brcc	.+6      	; 0xd8 <fsm_random+0x24>
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	e9 f0       	breq	.+58     	; 0x110 <fsm_random+0x5c>
  d6:	4b c0       	rjmp	.+150    	; 0x16e <fsm_random+0xba>
  d8:	83 30       	cpi	r24, 0x03	; 3
  da:	91 05       	cpc	r25, r1
  dc:	b1 f1       	breq	.+108    	; 0x14a <fsm_random+0x96>
  de:	04 97       	sbiw	r24, 0x04	; 4
  e0:	09 f0       	breq	.+2      	; 0xe4 <fsm_random+0x30>
  e2:	45 c0       	rjmp	.+138    	; 0x16e <fsm_random+0xba>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  e4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
  e8:	4a e0       	ldi	r20, 0x0A	; 10
  ea:	be 01       	movw	r22, r28
  ec:	6f 5f       	subi	r22, 0xFF	; 255
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 ca 03 	call	0x794	; 0x794 <__itoa_ncheck>
        break;

    // Send pseudo-random value to UART
    case UART_STATE:
        itoa(new, uart_string, 10);
        uart_puts(" "); uart_puts(uart_string);
  f6:	85 e1       	ldi	r24, 0x15	; 21
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 8d 01 	call	0x31a	; 0x31a <uart_puts>
  fe:	ce 01       	movw	r24, r28
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	0e 94 8d 01 	call	0x31a	; 0x31a <uart_puts>
        last = new;
 106:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 10a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <last.1829>
 10e:	2f c0       	rjmp	.+94     	; 0x16e <fsm_random+0xba>
    static uint8_t new = 0;
    char uart_string[5];

    switch (current_state) {
    case IDLE_STATE:
        if (values < 20) {
 110:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <values.1828>
 114:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <values.1828+0x1>
 118:	84 31       	cpi	r24, 0x14	; 20
 11a:	91 05       	cpc	r25, r1
 11c:	18 f4       	brcc	.+6      	; 0x124 <fsm_random+0x70>
            current_state = RAND4_STATE;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	27 c0       	rjmp	.+78     	; 0x172 <fsm_random+0xbe>
        } else if (values < 100) {
 124:	84 36       	cpi	r24, 0x64	; 100
 126:	91 05       	cpc	r25, r1
 128:	40 f5       	brcc	.+80     	; 0x17a <fsm_random+0xc6>
            if (values == 20) {
 12a:	44 97       	sbiw	r24, 0x14	; 20
 12c:	31 f4       	brne	.+12     	; 0x13a <fsm_random+0x86>
                last = 0;
 12e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <last.1829>
                uart_puts("\r\n\r\n");
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 8d 01 	call	0x31a	; 0x31a <uart_puts>
            }
            current_state = RAND8_STATE;
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	19 c0       	rjmp	.+50     	; 0x172 <fsm_random+0xbe>
        }
        break;

    // Call 4-bit LFSR generator
    case RAND4_STATE:
        new = rand4_asm(last);
 140:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <last.1829>
 144:	0e 94 8f 03 	call	0x71e	; 0x71e <rand4_asm>
 148:	04 c0       	rjmp	.+8      	; 0x152 <fsm_random+0x9e>
        current_state = UART_STATE;
        break;

    // Call 8-bit LFSR generator
    case RAND8_STATE:
        new = rand8_asm(last);
 14a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <last.1829>
 14e:	0e 94 9e 03 	call	0x73c	; 0x73c <rand8_asm>
 152:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
        values++;
 156:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <values.1828>
 15a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <values.1828+0x1>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <values.1828+0x1>
 164:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <values.1828>
        current_state = UART_STATE;
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <fsm_random+0xbe>
        last = new;
        current_state = IDLE_STATE;
        break;

    default:
        current_state = IDLE_STATE;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    }
}
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <__vector_13>:

/* Interrupts --------------------------------------------------------*/
/* Timer1 overflow interrupt routine.
 * Update state of the FSM. */
ISR(TIMER1_OVF_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
    fsm_random();
 1ac:	0e 94 5a 00 	call	0xb4	; 0xb4 <fsm_random>
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 1e6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
 1ea:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 1ee:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 1f0:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <UART_RxHead>
 1f4:	ef 5f       	subi	r30, 0xFF	; 255
 1f6:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 1f8:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <UART_RxTail>
 1fc:	e2 17       	cp	r30, r18
 1fe:	39 f0       	breq	.+14     	; 0x20e <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 200:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	e9 5b       	subi	r30, 0xB9	; 185
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	90 83       	st	Z, r25
 20c:	01 c0       	rjmp	.+2      	; 0x210 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 20e:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 210:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <UART_LastRxError>
 214:	89 2b       	or	r24, r25
 216:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <UART_LastRxError>
}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 240:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
 244:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART_TxTail>
 248:	98 17       	cp	r25, r24
 24a:	69 f0       	breq	.+26     	; 0x266 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 24c:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <UART_TxTail>
 250:	ef 5f       	subi	r30, 0xFF	; 255
 252:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 254:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	e9 59       	subi	r30, 0x99	; 153
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	80 81       	ld	r24, Z
 260:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 264:	05 c0       	rjmp	.+10     	; 0x270 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 266:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 26a:	8f 7d       	andi	r24, 0xDF	; 223
 26c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 282:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_TxHead>
    UART_TxTail = 0;
 286:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_TxTail>
    UART_RxHead = 0;
 28a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_RxHead>
    UART_RxTail = 0;
 28e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 292:	97 ff       	sbrs	r25, 7
 294:	03 c0       	rjmp	.+6      	; 0x29c <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 296:	22 e0       	ldi	r18, 0x02	; 2
 298:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 29c:	90 78       	andi	r25, 0x80	; 128
 29e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 2a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 2a6:	88 e9       	ldi	r24, 0x98	; 152
 2a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2b2:	08 95       	ret

000002b4 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
 2b4:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <UART_RxHead>
 2b8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <UART_RxTail>
 2bc:	98 17       	cp	r25, r24
 2be:	a9 f0       	breq	.+42     	; 0x2ea <uart_getc+0x36>
    {
        return UART_NO_DATA; /* no data available */
    }

    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 2c0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_RxTail>
 2c4:	9f 5f       	subi	r25, 0xFF	; 255
 2c6:	9f 71       	andi	r25, 0x1F	; 31

    /* get data from receive buffer */
    data        = UART_RxBuf[tmptail];
 2c8:	e9 2f       	mov	r30, r25
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	e9 5b       	subi	r30, 0xB9	; 185
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 2d2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <UART_LastRxError>

    /* store buffer index */
    UART_RxTail = tmptail;
 2d6:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <UART_RxTail>

    UART_LastRxError = 0;
 2da:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <UART_LastRxError>
    return (lastRxError << 8) + data;
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	98 2f       	mov	r25, r24
 2e2:	88 27       	eor	r24, r24
 2e4:	82 0f       	add	r24, r18
 2e6:	91 1d       	adc	r25, r1
 2e8:	08 95       	ret
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
    {
        return UART_NO_DATA; /* no data available */
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	91 e0       	ldi	r25, 0x01	; 1
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 2ee:	08 95       	ret

000002f0 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2f0:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
 2f4:	9f 5f       	subi	r25, 0xFF	; 255
 2f6:	9f 71       	andi	r25, 0x1F	; 31

    while (tmphead == UART_TxTail)
 2f8:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <UART_TxTail>
 2fc:	92 17       	cp	r25, r18
 2fe:	e1 f3       	breq	.-8      	; 0x2f8 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 300:	e9 2f       	mov	r30, r25
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	e9 59       	subi	r30, 0x99	; 153
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 30a:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 30e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 312:	80 62       	ori	r24, 0x20	; 32
 314:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 318:	08 95       	ret

0000031a <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
    while (*s)
 320:	89 91       	ld	r24, Y+
 322:	88 23       	and	r24, r24
 324:	19 f0       	breq	.+6      	; 0x32c <uart_puts+0x12>
        uart_putc(*s++);
 326:	0e 94 78 01 	call	0x2f0	; 0x2f0 <uart_putc>
 32a:	fa cf       	rjmp	.-12     	; 0x320 <uart_puts+0x6>
}/* uart_puts */
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 338:	84 91       	lpm	r24, Z
 33a:	ef 01       	movw	r28, r30
 33c:	21 96       	adiw	r28, 0x01	; 1
 33e:	88 23       	and	r24, r24
 340:	21 f0       	breq	.+8      	; 0x34a <uart_puts_p+0x18>
        uart_putc(c);
 342:	0e 94 78 01 	call	0x2f0	; 0x2f0 <uart_putc>
 346:	fe 01       	movw	r30, r28
 348:	f7 cf       	rjmp	.-18     	; 0x338 <uart_puts_p+0x6>
}/* uart_puts_p */
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <twi_init>:

/* Functions ---------------------------------------------------------*/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 350:	87 b1       	in	r24, 0x07	; 7
 352:	8f 7c       	andi	r24, 0xCF	; 207
 354:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 356:	88 b1       	in	r24, 0x08	; 8
 358:	80 63       	ori	r24, 0x30	; 48
 35a:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 35c:	e9 eb       	ldi	r30, 0xB9	; 185
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	8c 7f       	andi	r24, 0xFC	; 252
 364:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 366:	88 e9       	ldi	r24, 0x98	; 152
 368:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 36c:	08 95       	ret

0000036e <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 36e:	94 ea       	ldi	r25, 0xA4	; 164
 370:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 374:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 378:	97 ff       	sbrs	r25, 7
 37a:	fc cf       	rjmp	.-8      	; 0x374 <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 37c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 380:	84 e8       	ldi	r24, 0x84	; 132
 382:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 386:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 38a:	87 ff       	sbrs	r24, 7
 38c:	fc cf       	rjmp	.-8      	; 0x386 <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 38e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 392:	98 7f       	andi	r25, 0xF8	; 248
    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
        if (twi_response == 0x18 || twi_response == 0x40) {
 394:	98 31       	cpi	r25, 0x18	; 24
 396:	19 f0       	breq	.+6      	; 0x39e <twi_start+0x30>
        return 0;   /* Slave device accessible */
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 34       	cpi	r25, 0x40	; 64
 39c:	09 f4       	brne	.+2      	; 0x3a0 <twi_start+0x32>
 39e:	80 e0       	ldi	r24, 0x00	; 0
    }
    else {
        return 1;   /* Failed to access slave device */
    }
}
 3a0:	08 95       	ret

000003a2 <twi_write>:


/*--------------------------------------------------------------------*/
void twi_write(uint8_t data)
{
    TWDR = data;
 3a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 3a6:	84 e8       	ldi	r24, 0x84	; 132
 3a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 3ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3b0:	87 ff       	sbrs	r24, 7
 3b2:	fc cf       	rjmp	.-8      	; 0x3ac <twi_write+0xa>
}
 3b4:	08 95       	ret

000003b6 <twi_read_ack>:


/*--------------------------------------------------------------------*/
uint8_t twi_read_ack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 3b6:	84 ec       	ldi	r24, 0xC4	; 196
 3b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 3bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3c0:	87 ff       	sbrs	r24, 7
 3c2:	fc cf       	rjmp	.-8      	; 0x3bc <twi_read_ack+0x6>
	return (TWDR);
 3c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 3c8:	08 95       	ret

000003ca <twi_read_nack>:


/*--------------------------------------------------------------------*/
uint8_t twi_read_nack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
 3ca:	84 e8       	ldi	r24, 0x84	; 132
 3cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 3d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3d4:	87 ff       	sbrs	r24, 7
 3d6:	fc cf       	rjmp	.-8      	; 0x3d0 <twi_read_nack+0x6>
	return (TWDR);
 3d8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 3dc:	08 95       	ret

000003de <twi_stop>:


/*--------------------------------------------------------------------*/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 3de:	84 e9       	ldi	r24, 0x94	; 148
 3e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3e4:	08 95       	ret

000003e6 <GPIO_config_output>:

/* Functions - - - - */
void GPIO_config_output (volatile uint8_t *reg_name, uint8_t pin_num)
{
// Body of the function
    *reg_name|= _BV(pin_num);
 3e6:	fc 01       	movw	r30, r24
 3e8:	40 81       	ld	r20, Z
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <GPIO_config_output+0xc>
 3f0:	22 0f       	add	r18, r18
 3f2:	6a 95       	dec	r22
 3f4:	ea f7       	brpl	.-6      	; 0x3f0 <GPIO_config_output+0xa>
 3f6:	24 2b       	or	r18, r20
 3f8:	20 83       	st	Z, r18
 3fa:	08 95       	ret

000003fc <GPIO_config_input_nopull>:

}
void GPIO_config_input_nopull (volatile uint8_t *reg_name, uint8_t pin_num)
{
 3fc:	fc 01       	movw	r30, r24
    *reg_name &= ~_BV(pin_num);
 3fe:	90 81       	ld	r25, Z
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	01 c0       	rjmp	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	22 0f       	add	r18, r18
 408:	6a 95       	dec	r22
 40a:	ea f7       	brpl	.-6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40c:	20 95       	com	r18
 40e:	29 23       	and	r18, r25
 410:	20 83       	st	Z, r18
 412:	08 95       	ret

00000414 <GPIO_config_input_pullup>:
    
}
void GPIO_config_input_pullup (volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name &= ~_BV(pin_num);
 414:	fc 01       	movw	r30, r24
 416:	40 81       	ld	r20, Z
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	01 c0       	rjmp	.+2      	; 0x420 <GPIO_config_input_pullup+0xc>
 41e:	22 0f       	add	r18, r18
 420:	6a 95       	dec	r22
 422:	ea f7       	brpl	.-6      	; 0x41e <GPIO_config_input_pullup+0xa>
 424:	32 2f       	mov	r19, r18
 426:	30 95       	com	r19
 428:	34 23       	and	r19, r20
 42a:	30 83       	st	Z, r19
    DDR(*reg_name) |= _BV(pin_num);
 42c:	82 91       	ld	r24, -Z
 42e:	28 2b       	or	r18, r24
 430:	20 83       	st	Z, r18
 432:	08 95       	ret

00000434 <GPIO_write>:
}
void GPIO_write (volatile uint8_t *reg_name, uint8_t pin_num, uint8_t pin_val)
{
 434:	fc 01       	movw	r30, r24
    if(pin_val == 0)
    {
        *reg_name &= ~_BV(pin_num);
 436:	80 81       	ld	r24, Z
 438:	21 e0       	ldi	r18, 0x01	; 1
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	01 c0       	rjmp	.+2      	; 0x440 <GPIO_write+0xc>
 43e:	22 0f       	add	r18, r18
 440:	6a 95       	dec	r22
 442:	ea f7       	brpl	.-6      	; 0x43e <GPIO_write+0xa>
    *reg_name &= ~_BV(pin_num);
    DDR(*reg_name) |= _BV(pin_num);
}
void GPIO_write (volatile uint8_t *reg_name, uint8_t pin_num, uint8_t pin_val)
{
    if(pin_val == 0)
 444:	41 11       	cpse	r20, r1
 446:	03 c0       	rjmp	.+6      	; 0x44e <GPIO_write+0x1a>
    {
        *reg_name &= ~_BV(pin_num);
 448:	20 95       	com	r18
 44a:	28 23       	and	r18, r24
 44c:	01 c0       	rjmp	.+2      	; 0x450 <GPIO_write+0x1c>
    }
    else
    {
        *reg_name |= _BV(pin_num);
 44e:	28 2b       	or	r18, r24
 450:	20 83       	st	Z, r18
 452:	08 95       	ret

00000454 <GPIO_toggle>:
    }   
}
void GPIO_toggle (volatile uint8_t *reg_name, uint8_t pin_num)
{
        *reg_name ^= _BV(pin_num);
 454:	fc 01       	movw	r30, r24
 456:	40 81       	ld	r20, Z
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	01 c0       	rjmp	.+2      	; 0x460 <GPIO_toggle+0xc>
 45e:	22 0f       	add	r18, r18
 460:	6a 95       	dec	r22
 462:	ea f7       	brpl	.-6      	; 0x45e <GPIO_toggle+0xa>
 464:	24 27       	eor	r18, r20
 466:	20 83       	st	Z, r18
 468:	08 95       	ret

0000046a <GPIO_read>:
}

uint8_t GPIO_read (volatile uint8_t *reg_name, uint8_t pin_num)
{
    uint8_t temp;
    if(bit_is_clear(*reg_name, pin_num))
 46a:	fc 01       	movw	r30, r24
 46c:	80 81       	ld	r24, Z
    else
    {
        temp = 1;
    }

    return temp;
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <GPIO_read+0xc>
 472:	95 95       	asr	r25
 474:	87 95       	ror	r24
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <GPIO_read+0x8>
 47a:	81 70       	andi	r24, 0x01	; 1
 47c:	08 95       	ret

0000047e <SEG_toggle_clk>:
/*--------------------------------------------------------------------*/
void SEG_toggle_clk(void)
{
    /* TODO: Generate 2 us clock period */

    GPIO_write(&PORTD, (SEGMENT_CLK),1);
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	67 e0       	ldi	r22, 0x07	; 7
 482:	8b e2       	ldi	r24, 0x2B	; 43
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 1a 02 	call	0x434	; 0x434 <GPIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 48a:	8a e0       	ldi	r24, 0x0A	; 10
 48c:	8a 95       	dec	r24
 48e:	f1 f7       	brne	.-4      	; 0x48c <SEG_toggle_clk+0xe>
 490:	00 c0       	rjmp	.+0      	; 0x492 <SEG_toggle_clk+0x14>
    _delay_us(2);
    GPIO_write(&PORTD, (SEGMENT_CLK),0);
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	67 e0       	ldi	r22, 0x07	; 7
 496:	8b e2       	ldi	r24, 0x2B	; 43
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0c 94 1a 02 	jmp	0x434	; 0x434 <GPIO_write>

0000049e <SEG_putc>:
    0b00000001};  // Position 3

/* Functions ---------------------------------------------------------*/
void SEG_putc(uint8_t digit,
              uint8_t position)
{
 49e:	df 92       	push	r13
 4a0:	ef 92       	push	r14
 4a2:	ff 92       	push	r15
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
    uint8_t i;

    /* Read values from look-up tables */
    digit    = segment_digit[digit];
 4ac:	e8 2f       	mov	r30, r24
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	ea 5f       	subi	r30, 0xFA	; 250
 4b2:	fe 4f       	sbci	r31, 0xFE	; 254
 4b4:	e0 80       	ld	r14, Z
    position = segment_position[position];
 4b6:	e6 2f       	mov	r30, r22
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	ee 5f       	subi	r30, 0xFE	; 254
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	d0 80       	ld	r13, Z
 4c0:	c7 e0       	ldi	r28, 0x07	; 7
 4c2:	d0 e0       	ldi	r29, 0x00	; 0

    /* Put 1st byte to serial data */
    for (i = 0; i < 8; i++) {
        // TODO: Test and send 8 individual "digit" bits

        GPIO_write(&PORTB, SEGMENT_DATA, ((digit & _BV(7-i)) >> (7-i)));
 4c4:	01 e0       	ldi	r16, 0x01	; 1
 4c6:	10 e0       	ldi	r17, 0x00	; 0
 4c8:	f1 2c       	mov	r15, r1
 4ca:	a8 01       	movw	r20, r16
 4cc:	0c 2e       	mov	r0, r28
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <SEG_putc+0x36>
 4d0:	44 0f       	add	r20, r20
 4d2:	55 1f       	adc	r21, r21
 4d4:	0a 94       	dec	r0
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <SEG_putc+0x32>
 4d8:	4e 21       	and	r20, r14
 4da:	5f 21       	and	r21, r15
 4dc:	0c 2e       	mov	r0, r28
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <SEG_putc+0x46>
 4e0:	55 95       	asr	r21
 4e2:	47 95       	ror	r20
 4e4:	0a 94       	dec	r0
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <SEG_putc+0x42>
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	85 e2       	ldi	r24, 0x25	; 37
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 1a 02 	call	0x434	; 0x434 <GPIO_write>
        SEG_toggle_clk();
 4f2:	0e 94 3f 02 	call	0x47e	; 0x47e <SEG_toggle_clk>
 4f6:	21 97       	sbiw	r28, 0x01	; 1
 4f8:	40 f7       	brcc	.-48     	; 0x4ca <SEG_putc+0x2c>
 4fa:	c7 e0       	ldi	r28, 0x07	; 7
 4fc:	d0 e0       	ldi	r29, 0x00	; 0
    }
    /* Put 2nd byte to serial data */
    for (i = 0; i < 8; i++) {
        // TODO: Test and send 8 individual "position" bits
        
        GPIO_write(&PORTB, SEGMENT_DATA, ((position & _BV(7-i)) >> (7-i)));
 4fe:	ee 24       	eor	r14, r14
 500:	e3 94       	inc	r14
 502:	f1 2c       	mov	r15, r1
 504:	0d 2d       	mov	r16, r13
 506:	10 e0       	ldi	r17, 0x00	; 0
 508:	a7 01       	movw	r20, r14
 50a:	0c 2e       	mov	r0, r28
 50c:	02 c0       	rjmp	.+4      	; 0x512 <SEG_putc+0x74>
 50e:	44 0f       	add	r20, r20
 510:	55 1f       	adc	r21, r21
 512:	0a 94       	dec	r0
 514:	e2 f7       	brpl	.-8      	; 0x50e <SEG_putc+0x70>
 516:	40 23       	and	r20, r16
 518:	51 23       	and	r21, r17
 51a:	0c 2e       	mov	r0, r28
 51c:	02 c0       	rjmp	.+4      	; 0x522 <SEG_putc+0x84>
 51e:	55 95       	asr	r21
 520:	47 95       	ror	r20
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <SEG_putc+0x80>
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	85 e2       	ldi	r24, 0x25	; 37
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 1a 02 	call	0x434	; 0x434 <GPIO_write>
        SEG_toggle_clk();
 530:	0e 94 3f 02 	call	0x47e	; 0x47e <SEG_toggle_clk>
 534:	21 97       	sbiw	r28, 0x01	; 1
 536:	40 f7       	brcc	.-48     	; 0x508 <SEG_putc+0x6a>
    }

    GPIO_write(&PORTD, (SEGMENT_LATCH),1);
 538:	41 e0       	ldi	r20, 0x01	; 1
 53a:	64 e0       	ldi	r22, 0x04	; 4
 53c:	8b e2       	ldi	r24, 0x2B	; 43
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 1a 02 	call	0x434	; 0x434 <GPIO_write>
 544:	8a e0       	ldi	r24, 0x0A	; 10
 546:	8a 95       	dec	r24
 548:	f1 f7       	brne	.-4      	; 0x546 <SEG_putc+0xa8>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <SEG_putc+0xae>
    _delay_us(2);
    GPIO_write(&PORTD, (SEGMENT_LATCH),0);
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	64 e0       	ldi	r22, 0x04	; 4
 550:	8b e2       	ldi	r24, 0x2B	; 43
 552:	90 e0       	ldi	r25, 0x00	; 0
}
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	df 90       	pop	r13
        SEG_toggle_clk();
    }

    GPIO_write(&PORTD, (SEGMENT_LATCH),1);
    _delay_us(2);
    GPIO_write(&PORTD, (SEGMENT_LATCH),0);
 562:	0c 94 1a 02 	jmp	0x434	; 0x434 <GPIO_write>

00000566 <TIM_config_prescaler>:
/* Functions ---------------------------------------------------------*/
void TIM_config_prescaler(uint8_t timer_name,
                          uint8_t presc_val)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
 566:	81 11       	cpse	r24, r1
 568:	31 c0       	rjmp	.+98     	; 0x5cc <TIM_config_prescaler+0x66>
        switch (presc_val) {
 56a:	63 30       	cpi	r22, 0x03	; 3
 56c:	f9 f0       	breq	.+62     	; 0x5ac <TIM_config_prescaler+0x46>
 56e:	50 f4       	brcc	.+20     	; 0x584 <TIM_config_prescaler+0x1e>
 570:	66 23       	and	r22, r22
 572:	79 f0       	breq	.+30     	; 0x592 <TIM_config_prescaler+0x2c>
 574:	61 30       	cpi	r22, 0x01	; 1
 576:	39 f5       	brne	.+78     	; 0x5c6 <TIM_config_prescaler+0x60>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR0B = TCCR0B & ~_BV(CS02);
 578:	85 b5       	in	r24, 0x25	; 37
 57a:	8b 7f       	andi	r24, 0xFB	; 251
 57c:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B |  _BV(CS01);
 57e:	85 b5       	in	r24, 0x25	; 37
 580:	82 60       	ori	r24, 0x02	; 2
 582:	0f c0       	rjmp	.+30     	; 0x5a2 <TIM_config_prescaler+0x3c>
void TIM_config_prescaler(uint8_t timer_name,
                          uint8_t presc_val)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
        switch (presc_val) {
 584:	65 30       	cpi	r22, 0x05	; 5
 586:	41 f0       	breq	.+16     	; 0x598 <TIM_config_prescaler+0x32>
 588:	66 30       	cpi	r22, 0x06	; 6
 58a:	e9 f4       	brne	.+58     	; 0x5c6 <TIM_config_prescaler+0x60>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B & ~_BV(CS00);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR0B = TCCR0B |  _BV(CS02);
 58c:	85 b5       	in	r24, 0x25	; 37
 58e:	84 60       	ori	r24, 0x04	; 4
 590:	13 c0       	rjmp	.+38     	; 0x5b8 <TIM_config_prescaler+0x52>
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
        switch (presc_val) {
            case TIM_PRESC_1:
                /* 001 */
                TCCR0B = TCCR0B & ~_BV(CS02);
 592:	85 b5       	in	r24, 0x25	; 37
 594:	8b 7f       	andi	r24, 0xFB	; 251
 596:	10 c0       	rjmp	.+32     	; 0x5b8 <TIM_config_prescaler+0x52>
                TCCR0B = TCCR0B |  _BV(CS01);
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            case TIM_PRESC_256:
                /* 100 */
                TCCR0B = TCCR0B |  _BV(CS02);
 598:	85 b5       	in	r24, 0x25	; 37
 59a:	84 60       	ori	r24, 0x04	; 4
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR0B = TCCR0B & ~_BV(CS02);
 59c:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B & ~_BV(CS01);
 59e:	85 b5       	in	r24, 0x25	; 37
 5a0:	8d 7f       	andi	r24, 0xFD	; 253
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR0B = TCCR0B & ~_BV(CS02);
                TCCR0B = TCCR0B |  _BV(CS01);
 5a2:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B & ~_BV(CS00);
 5a4:	85 b5       	in	r24, 0x25	; 37
 5a6:	8e 7f       	andi	r24, 0xFE	; 254
 5a8:	85 bd       	out	0x25, r24	; 37
                break;
 5aa:	08 95       	ret
            case TIM_PRESC_64:
                /* 011 */
                TCCR0B = TCCR0B & ~_BV(CS02);
 5ac:	85 b5       	in	r24, 0x25	; 37
 5ae:	8b 7f       	andi	r24, 0xFB	; 251
 5b0:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B |  _BV(CS01);
 5b2:	85 b5       	in	r24, 0x25	; 37
 5b4:	82 60       	ori	r24, 0x02	; 2
 5b6:	03 c0       	rjmp	.+6      	; 0x5be <TIM_config_prescaler+0x58>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B & ~_BV(CS00);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR0B = TCCR0B |  _BV(CS02);
 5b8:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B & ~_BV(CS01);
 5ba:	85 b5       	in	r24, 0x25	; 37
 5bc:	8d 7f       	andi	r24, 0xFD	; 253
 5be:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B |  _BV(CS00);
 5c0:	85 b5       	in	r24, 0x25	; 37
 5c2:	81 60       	ori	r24, 0x01	; 1
 5c4:	f1 cf       	rjmp	.-30     	; 0x5a8 <TIM_config_prescaler+0x42>
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR0B = TCCR0B & ~_BV(CS02);
 5c6:	85 b5       	in	r24, 0x25	; 37
 5c8:	8b 7f       	andi	r24, 0xFB	; 251
 5ca:	e8 cf       	rjmp	.-48     	; 0x59c <TIM_config_prescaler+0x36>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B & ~_BV(CS00);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
 5cc:	81 30       	cpi	r24, 0x01	; 1
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <TIM_config_prescaler+0x6c>
 5d0:	44 c0       	rjmp	.+136    	; 0x65a <TIM_config_prescaler+0xf4>
        switch (presc_val) {
 5d2:	63 30       	cpi	r22, 0x03	; 3
 5d4:	d1 f0       	breq	.+52     	; 0x60a <TIM_config_prescaler+0xa4>
 5d6:	68 f4       	brcc	.+26     	; 0x5f2 <TIM_config_prescaler+0x8c>
 5d8:	66 23       	and	r22, r22
 5da:	99 f0       	breq	.+38     	; 0x602 <TIM_config_prescaler+0x9c>
 5dc:	61 30       	cpi	r22, 0x01	; 1
 5de:	69 f5       	brne	.+90     	; 0x63a <TIM_config_prescaler+0xd4>
                TCCR1B = TCCR1B & ~_BV(CS11);
                TCCR1B = TCCR1B |  _BV(CS10);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR1B = TCCR1B & ~_BV(CS12);
 5e0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 5e4:	8b 7f       	andi	r24, 0xFB	; 251
 5e6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B |  _BV(CS11);
 5ea:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 5ee:	82 60       	ori	r24, 0x02	; 2
 5f0:	2c c0       	rjmp	.+88     	; 0x64a <TIM_config_prescaler+0xe4>
                TCCR0B = TCCR0B & ~_BV(CS00);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
        switch (presc_val) {
 5f2:	65 30       	cpi	r22, 0x05	; 5
 5f4:	99 f0       	breq	.+38     	; 0x61c <TIM_config_prescaler+0xb6>
 5f6:	66 30       	cpi	r22, 0x06	; 6
 5f8:	01 f5       	brne	.+64     	; 0x63a <TIM_config_prescaler+0xd4>
                TCCR1B = TCCR1B & ~_BV(CS11);
                TCCR1B = TCCR1B & ~_BV(CS10);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR1B = TCCR1B |  _BV(CS12);
 5fa:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 5fe:	84 60       	ori	r24, 0x04	; 4
 600:	11 c0       	rjmp	.+34     	; 0x624 <TIM_config_prescaler+0xbe>
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
        switch (presc_val) {
            case TIM_PRESC_1:
                /* 001 */
                TCCR1B = TCCR1B & ~_BV(CS12);
 602:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 606:	8b 7f       	andi	r24, 0xFB	; 251
 608:	0d c0       	rjmp	.+26     	; 0x624 <TIM_config_prescaler+0xbe>
                TCCR1B = TCCR1B |  _BV(CS11);
                TCCR1B = TCCR1B & ~_BV(CS10);
                break;
            case TIM_PRESC_64:
                /* 011 */
                TCCR1B = TCCR1B & ~_BV(CS12);
 60a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 60e:	8b 7f       	andi	r24, 0xFB	; 251
 610:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B |  _BV(CS11);
 614:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 618:	82 60       	ori	r24, 0x02	; 2
 61a:	09 c0       	rjmp	.+18     	; 0x62e <TIM_config_prescaler+0xc8>
                TCCR1B = TCCR1B |  _BV(CS10);
                break;
            case TIM_PRESC_256:
                /* 100 */
                TCCR1B = TCCR1B |  _BV(CS12);
 61c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 620:	84 60       	ori	r24, 0x04	; 4
 622:	0e c0       	rjmp	.+28     	; 0x640 <TIM_config_prescaler+0xda>
                TCCR1B = TCCR1B & ~_BV(CS11);
                TCCR1B = TCCR1B & ~_BV(CS10);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR1B = TCCR1B |  _BV(CS12);
 624:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B & ~_BV(CS11);
 628:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 62c:	8d 7f       	andi	r24, 0xFD	; 253
 62e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B |  _BV(CS10);
 632:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 636:	81 60       	ori	r24, 0x01	; 1
 638:	0d c0       	rjmp	.+26     	; 0x654 <TIM_config_prescaler+0xee>
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR1B = TCCR1B & ~_BV(CS12);
 63a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 63e:	8b 7f       	andi	r24, 0xFB	; 251
 640:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B & ~_BV(CS11);
 644:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 648:	8d 7f       	andi	r24, 0xFD	; 253
 64a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B & ~_BV(CS10);
 64e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 652:	8e 7f       	andi	r24, 0xFE	; 254
 654:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 658:	08 95       	ret
        }
    }
    /* Timer/Counter2 */
    else {
        switch (presc_val) {
 65a:	86 2f       	mov	r24, r22
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	87 30       	cpi	r24, 0x07	; 7
 660:	91 05       	cpc	r25, r1
 662:	28 f5       	brcc	.+74     	; 0x6ae <TIM_config_prescaler+0x148>
 664:	fc 01       	movw	r30, r24
 666:	ec 5c       	subi	r30, 0xCC	; 204
 668:	ff 4f       	sbci	r31, 0xFF	; 255
                TCCR2B = TCCR2B & ~_BV(CS21);
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR2B = TCCR2B |  _BV(CS22);
 66a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR1B = TCCR1B & ~_BV(CS10);
        }
    }
    /* Timer/Counter2 */
    else {
        switch (presc_val) {
 66e:	0c 94 c4 03 	jmp	0x788	; 0x788 <__tablejump2__>
            case TIM_PRESC_1:
                /* 001 */
                TCCR2B = TCCR2B & ~_BV(CS22);
 672:	8b 7f       	andi	r24, 0xFB	; 251
 674:	11 c0       	rjmp	.+34     	; 0x698 <TIM_config_prescaler+0x132>
                TCCR2B = TCCR2B & ~_BV(CS21);
                TCCR2B = TCCR2B |  _BV(CS20);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR2B = TCCR2B & ~_BV(CS22);
 676:	8b 7f       	andi	r24, 0xFB	; 251
 678:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B |  _BV(CS21);
 67c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 680:	82 60       	ori	r24, 0x02	; 2
 682:	1d c0       	rjmp	.+58     	; 0x6be <TIM_config_prescaler+0x158>
                TCCR2B = TCCR2B |  _BV(CS21);
                TCCR2B = TCCR2B | _BV(CS20);
                break;
            case TIM_PRESC_64:
                /* 011 */
                TCCR2B = TCCR2B & ~_BV(CS22);
 684:	8b 7f       	andi	r24, 0xFB	; 251
 686:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B |  _BV(CS21);
 68a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 68e:	82 60       	ori	r24, 0x02	; 2
 690:	08 c0       	rjmp	.+16     	; 0x6a2 <TIM_config_prescaler+0x13c>
                TCCR2B = TCCR2B & ~_BV(CS21);
                TCCR2B = TCCR2B |  _BV(CS20);
                break;
            case TIM_PRESC_256:
                /* 100 */
                TCCR2B = TCCR2B |  _BV(CS22);
 692:	84 60       	ori	r24, 0x04	; 4
 694:	0f c0       	rjmp	.+30     	; 0x6b4 <TIM_config_prescaler+0x14e>
                TCCR2B = TCCR2B & ~_BV(CS21);
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR2B = TCCR2B |  _BV(CS22);
 696:	84 60       	ori	r24, 0x04	; 4
 698:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B & ~_BV(CS21);
 69c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 6a0:	8d 7f       	andi	r24, 0xFD	; 253
 6a2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B |  _BV(CS20);
 6a6:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 6aa:	81 60       	ori	r24, 0x01	; 1
 6ac:	0d c0       	rjmp	.+26     	; 0x6c8 <TIM_config_prescaler+0x162>
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR2B = TCCR2B & ~_BV(CS22);
 6ae:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 6b2:	8b 7f       	andi	r24, 0xFB	; 251
 6b4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B & ~_BV(CS21);
 6b8:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 6bc:	8d 7f       	andi	r24, 0xFD	; 253
 6be:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B & ~_BV(CS20);
 6c2:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 6c6:	8e 7f       	andi	r24, 0xFE	; 254
 6c8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 6cc:	08 95       	ret

000006ce <TIM_config_interrupt>:
/*--------------------------------------------------------------------*/
void TIM_config_interrupt(uint8_t timer_name,
                          uint8_t interr_mode)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
 6ce:	81 11       	cpse	r24, r1
 6d0:	0c c0       	rjmp	.+24     	; 0x6ea <TIM_config_interrupt+0x1c>
        switch (interr_mode) {
            case TIM_OVERFLOW_ENABLE:
                TIMSK0 = TIMSK0 | _BV(TOIE0);
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
 6d2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
void TIM_config_interrupt(uint8_t timer_name,
                          uint8_t interr_mode)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
        switch (interr_mode) {
 6d6:	66 23       	and	r22, r22
 6d8:	21 f0       	breq	.+8      	; 0x6e2 <TIM_config_interrupt+0x14>
 6da:	61 30       	cpi	r22, 0x01	; 1
 6dc:	11 f4       	brne	.+4      	; 0x6e2 <TIM_config_interrupt+0x14>
            case TIM_OVERFLOW_ENABLE:
                TIMSK0 = TIMSK0 | _BV(TOIE0);
 6de:	81 60       	ori	r24, 0x01	; 1
 6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <TIM_config_interrupt+0x16>
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
 6e2:	8e 7f       	andi	r24, 0xFE	; 254
 6e4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
                break;
 6e8:	08 95       	ret
                /* Disable overflow interrupt */
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	61 f4       	brne	.+24     	; 0x706 <TIM_config_interrupt+0x38>
        switch (interr_mode) {
            case TIM_OVERFLOW_ENABLE:
                TIMSK1 = TIMSK1 | _BV(TOIE1);
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
 6ee:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
        switch (interr_mode) {
 6f2:	66 23       	and	r22, r22
 6f4:	21 f0       	breq	.+8      	; 0x6fe <TIM_config_interrupt+0x30>
 6f6:	61 30       	cpi	r22, 0x01	; 1
 6f8:	11 f4       	brne	.+4      	; 0x6fe <TIM_config_interrupt+0x30>
            case TIM_OVERFLOW_ENABLE:
                TIMSK1 = TIMSK1 | _BV(TOIE1);
 6fa:	81 60       	ori	r24, 0x01	; 1
 6fc:	01 c0       	rjmp	.+2      	; 0x700 <TIM_config_interrupt+0x32>
            case TIM_OVERFLOW_DISABLE:
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
                break;
            default:
                /* Disable overflow interrupt */
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
 6fe:	8e 7f       	andi	r24, 0xFE	; 254
 700:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 704:	08 95       	ret
        switch (interr_mode) {
            case TIM_OVERFLOW_ENABLE:
                TIMSK2 = TIMSK2 | _BV(TOIE2);
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK2 = TIMSK2 & ~_BV(TOIE2);
 706:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
        }
    }
    /* Timer/Counter2 */
    else {
        switch (interr_mode) {
 70a:	66 23       	and	r22, r22
 70c:	21 f0       	breq	.+8      	; 0x716 <TIM_config_interrupt+0x48>
 70e:	61 30       	cpi	r22, 0x01	; 1
 710:	11 f4       	brne	.+4      	; 0x716 <TIM_config_interrupt+0x48>
            case TIM_OVERFLOW_ENABLE:
                TIMSK2 = TIMSK2 | _BV(TOIE2);
 712:	81 60       	ori	r24, 0x01	; 1
 714:	01 c0       	rjmp	.+2      	; 0x718 <TIM_config_interrupt+0x4a>
            case TIM_OVERFLOW_DISABLE:
                TIMSK2 = TIMSK2 & ~_BV(TOIE2);
                break;
            default:
                /* Disable overflow interrupt */
                TIMSK2 = TIMSK2 & ~_BV(TOIE2);
 716:	8e 7f       	andi	r24, 0xFE	; 254
 718:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 71c:	08 95       	ret

0000071e <rand4_asm>:
 71e:	0f 93       	push	r16
 720:	1f 93       	push	r17
 722:	83 fb       	bst	r24, 3
 724:	00 f9       	bld	r16, 0
 726:	82 fb       	bst	r24, 2
 728:	10 f9       	bld	r17, 0
 72a:	01 27       	eor	r16, r17
 72c:	88 0f       	add	r24, r24
 72e:	00 95       	com	r16
 730:	00 fb       	bst	r16, 0
 732:	80 f9       	bld	r24, 0
 734:	8f 70       	andi	r24, 0x0F	; 15
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	08 95       	ret

0000073c <rand8_asm>:
 73c:	0f 93       	push	r16
 73e:	1f 93       	push	r17
 740:	87 fb       	bst	r24, 7
 742:	00 f9       	bld	r16, 0
 744:	85 fb       	bst	r24, 5
 746:	10 f9       	bld	r17, 0
 748:	01 27       	eor	r16, r17
 74a:	84 fb       	bst	r24, 4
 74c:	10 f9       	bld	r17, 0
 74e:	01 27       	eor	r16, r17
 750:	83 fb       	bst	r24, 3
 752:	10 f9       	bld	r17, 0
 754:	01 27       	eor	r16, r17
 756:	88 0f       	add	r24, r24
 758:	00 95       	com	r16
 75a:	00 fb       	bst	r16, 0
 75c:	80 f9       	bld	r24, 0
 75e:	1f 91       	pop	r17
 760:	0f 91       	pop	r16
 762:	08 95       	ret

00000764 <main>:
/* Main --------------------------------------------------------------*/
/* Generate a sequence of LFSR preudo-random values using 4- and 8-bit
 * structure. */
int main(void)
{
    uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU)); // 8N1
 764:	87 e6       	ldi	r24, 0x67	; 103
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 41 01 	call	0x282	; 0x282 <uart_init>

    /* Timer1
     * TODO: Enable overflow interrupt every 33 msec. */
    TIM_config_prescaler(TIM1, TIM_PRESC_8);
 76c:	61 e0       	ldi	r22, 0x01	; 1
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	0e 94 b3 02 	call	0x566	; 0x566 <TIM_config_prescaler>
    TIM_config_interrupt(TIM1, TIM_OVERFLOW_ENABLE);
 774:	61 e0       	ldi	r22, 0x01	; 1
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	0e 94 67 03 	call	0x6ce	; 0x6ce <TIM_config_interrupt>
    sei();
 77c:	78 94       	sei
    uart_puts("\r\n---LFSR pseudo-random generator---\r\n");
 77e:	87 e1       	ldi	r24, 0x17	; 23
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	0e 94 8d 01 	call	0x31a	; 0x31a <uart_puts>
 786:	ff cf       	rjmp	.-2      	; 0x786 <main+0x22>

00000788 <__tablejump2__>:
 788:	ee 0f       	add	r30, r30
 78a:	ff 1f       	adc	r31, r31
 78c:	05 90       	lpm	r0, Z+
 78e:	f4 91       	lpm	r31, Z
 790:	e0 2d       	mov	r30, r0
 792:	09 94       	ijmp

00000794 <__itoa_ncheck>:
 794:	bb 27       	eor	r27, r27
 796:	4a 30       	cpi	r20, 0x0A	; 10
 798:	31 f4       	brne	.+12     	; 0x7a6 <__itoa_ncheck+0x12>
 79a:	99 23       	and	r25, r25
 79c:	22 f4       	brpl	.+8      	; 0x7a6 <__itoa_ncheck+0x12>
 79e:	bd e2       	ldi	r27, 0x2D	; 45
 7a0:	90 95       	com	r25
 7a2:	81 95       	neg	r24
 7a4:	9f 4f       	sbci	r25, 0xFF	; 255
 7a6:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__utoa_common>

000007aa <__utoa_ncheck>:
 7aa:	bb 27       	eor	r27, r27

000007ac <__utoa_common>:
 7ac:	fb 01       	movw	r30, r22
 7ae:	55 27       	eor	r21, r21
 7b0:	aa 27       	eor	r26, r26
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	aa 1f       	adc	r26, r26
 7b8:	a4 17       	cp	r26, r20
 7ba:	10 f0       	brcs	.+4      	; 0x7c0 <__utoa_common+0x14>
 7bc:	a4 1b       	sub	r26, r20
 7be:	83 95       	inc	r24
 7c0:	50 51       	subi	r21, 0x10	; 16
 7c2:	b9 f7       	brne	.-18     	; 0x7b2 <__utoa_common+0x6>
 7c4:	a0 5d       	subi	r26, 0xD0	; 208
 7c6:	aa 33       	cpi	r26, 0x3A	; 58
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <__utoa_common+0x20>
 7ca:	a9 5d       	subi	r26, 0xD9	; 217
 7cc:	a1 93       	st	Z+, r26
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	79 f7       	brne	.-34     	; 0x7b0 <__utoa_common+0x4>
 7d2:	b1 11       	cpse	r27, r1
 7d4:	b1 93       	st	Z+, r27
 7d6:	11 92       	st	Z+, r1
 7d8:	cb 01       	movw	r24, r22
 7da:	0c 94 ef 03 	jmp	0x7de	; 0x7de <strrev>

000007de <strrev>:
 7de:	dc 01       	movw	r26, r24
 7e0:	fc 01       	movw	r30, r24
 7e2:	67 2f       	mov	r22, r23
 7e4:	71 91       	ld	r23, Z+
 7e6:	77 23       	and	r23, r23
 7e8:	e1 f7       	brne	.-8      	; 0x7e2 <strrev+0x4>
 7ea:	32 97       	sbiw	r30, 0x02	; 2
 7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <strrev+0x18>
 7ee:	7c 91       	ld	r23, X
 7f0:	6d 93       	st	X+, r22
 7f2:	70 83       	st	Z, r23
 7f4:	62 91       	ld	r22, -Z
 7f6:	ae 17       	cp	r26, r30
 7f8:	bf 07       	cpc	r27, r31
 7fa:	c8 f3       	brcs	.-14     	; 0x7ee <strrev+0x10>
 7fc:	08 95       	ret

000007fe <_exit>:
 7fe:	f8 94       	cli

00000800 <__stop_program>:
 800:	ff cf       	rjmp	.-2      	; 0x800 <__stop_program>
